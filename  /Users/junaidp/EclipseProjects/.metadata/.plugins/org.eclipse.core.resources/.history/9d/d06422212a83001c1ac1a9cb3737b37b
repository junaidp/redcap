package com.analytics.client.view.menus.queries.steps.clinicaldatamodel;


import java.util.ArrayList;

import com.analytics.client.view.menus.queries.steps.TabImpl;
import com.analytics.shared.dtos.DataModelDTO;
import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor.Path;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.IsWidget;
import com.google.gwt.user.client.ui.Widget;
import com.sencha.gxt.core.client.Style.LayoutRegion;
import com.sencha.gxt.core.client.ValueProvider;
import com.sencha.gxt.core.client.util.Margins;
import com.sencha.gxt.data.shared.LabelProvider;
import com.sencha.gxt.data.shared.ListStore;
import com.sencha.gxt.data.shared.ModelKeyProvider;
import com.sencha.gxt.data.shared.PropertyAccess;
import com.sencha.gxt.state.client.BorderLayoutStateHandler;
import com.sencha.gxt.widget.core.client.ContentPanel;
import com.sencha.gxt.widget.core.client.ListView;
import com.sencha.gxt.widget.core.client.button.TextButton;
import com.sencha.gxt.widget.core.client.container.BorderLayoutContainer;
import com.sencha.gxt.widget.core.client.container.BorderLayoutContainer.BorderLayoutData;
import com.sencha.gxt.widget.core.client.container.HorizontalLayoutContainer;
import com.sencha.gxt.widget.core.client.container.HorizontalLayoutContainer.HorizontalLayoutData;
import com.sencha.gxt.widget.core.client.container.MarginData;
import com.sencha.gxt.widget.core.client.event.SelectEvent;
import com.sencha.gxt.widget.core.client.event.SelectEvent.SelectHandler;
import com.sencha.gxt.widget.core.client.form.ListField;

public class ClinicalDataModel extends TabImpl  implements IsWidget{

	
	private BorderLayoutContainer widget;
	private BorderLayoutStateHandler stateHandler;

	@Override
	public Widget asWidget() {

		final boolean borders =  false ;
		final int margins = 8;

		FlexTable table = new FlexTable();
		table.getElement().getStyle().setProperty("margin", "10px");
		table.setCellSpacing(8);
		table.setCellPadding(4);

		for (int i = 0; i < LayoutRegion.values().length; i++) {
			final LayoutRegion r = LayoutRegion.values()[i];
			if (r == LayoutRegion.CENTER) {
				continue;
			}

			SelectHandler handler = new SelectHandler() {
				@Override
				public void onSelect(SelectEvent event) {
					TextButton btn = (TextButton) event.getSource();
					String txt = btn.getText();
					if (txt.equals("Expand")) {
						widget.expand(r);
					} else if (txt.equals("Collapse")) {
						widget.collapse(r);
					} else if (txt.equals("Show")) {
						widget.show(r);
					} else {
						widget.hide(r);
					}
				}
			};

			table.setHTML(i, 0, "<div style='font-size: 12px; width: 100px'>" + r.name() + ":</span>");
			table.setWidget(i, 1, new TextButton("Expand", handler));
			table.setWidget(i, 2, new TextButton("Collapse", handler));
			table.setWidget(i, 3, new TextButton("Show", handler));
			table.setWidget(i, 4, new TextButton("Hide", handler));
		}

		ContentPanel center = new ContentPanel();
		center.setHeading("Center");
		center.setResize(false);
		center.add(table);

		ContentPanel north = new ContentPanel();
		north.setHeading("North");

		ContentPanel west = new ContentPanel();
		west.setHeading("West");

		ContentPanel east = new ContentPanel();
		east.setHeading("East");

		ContentPanel south = new ContentPanel();
		south.setHeading("South");

		BorderLayoutData northData = new BorderLayoutData(100);
		northData.setMargins(new Margins(margins));
		northData.setCollapsible(true);
		northData.setCollapseHeaderVisible(true);
		northData.setSplit(true);
		northData.setCollapseMini(true);

		BorderLayoutData westData = new BorderLayoutData(150);
		westData.setMargins(new Margins(0, margins, 0, margins));
		westData.setCollapsible(true);
		westData.setCollapseHeaderVisible(true);
		westData.setSplit(true);
		westData.setCollapseMini(true);

		MarginData centerData = new MarginData();

		BorderLayoutData eastData = new BorderLayoutData(150);
		eastData.setMargins(new Margins(0, margins, 0, margins));
		eastData.setCollapsible(true);
		eastData.setCollapseHeaderVisible(true);
		eastData.setSplit(true);
		eastData.setCollapseMini(true);

		BorderLayoutData southData = new BorderLayoutData(100);
		southData.setMargins(new Margins(margins));
		southData.setCollapsible(true);
		southData.setCollapseHeaderVisible(true);
		southData.setSplit(true);
		southData.setCollapseMini(true);

		widget = new BorderLayoutContainer();
		widget.setBorders(borders);
		widget.setNorthWidget(north, northData);
		widget.setWestWidget(west, westData);
		widget.setCenterWidget(center, centerData);
		widget.setEastWidget(east, eastData);
		widget.setSouthWidget(south, southData);

		// 2. Persist the state of the border layout container
		stateHandler = new BorderLayoutStateHandler(widget, "blcId1");
		// Tell the widget to persist the state
		widget.setStateful(true);


		stateHandler.loadState();

		return widget;
	}

	@Override
	public void loadModel() {


	}

	@Override
	public void saveModel() {

	}

}
