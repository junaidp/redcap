package com.analytics.client.view.menus.dashboard.steps.clinicaldatamodel.targetdatamodel;

import com.analytics.client.view.MenuBase;
import com.analytics.client.view.menus.dashboard.DashboardUtils;
import com.analytics.shared.dtos.TargetDataModelDTO;
import com.google.gwt.cell.client.Cell;
import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Style;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Widget;
import com.sencha.gxt.cell.core.client.TextButtonCell;
import com.sencha.gxt.core.client.ValueProvider;
import com.sencha.gxt.core.client.util.Margins;
import com.sencha.gxt.data.shared.ListStore;
import com.sencha.gxt.data.shared.ModelKeyProvider;
import com.sencha.gxt.data.shared.PropertyAccess;
import com.sencha.gxt.widget.core.client.box.AutoProgressMessageBox;
import com.sencha.gxt.widget.core.client.button.TextButton;
import com.sencha.gxt.widget.core.client.container.HorizontalLayoutContainer;
import com.sencha.gxt.widget.core.client.container.VerticalLayoutContainer;
import com.sencha.gxt.widget.core.client.event.SelectEvent;
import com.sencha.gxt.widget.core.client.grid.ColumnConfig;
import com.sencha.gxt.widget.core.client.grid.ColumnModel;
import com.sencha.gxt.widget.core.client.grid.Grid;
import com.sencha.gxt.widget.core.client.info.Info;


import java.util.ArrayList;
import java.util.List;

public class TargetDataModelGrid extends MenuBase {
    private static final vendorProperties props = GWT.create(vendorProperties.class);
    private ListStore<TargetDataModelDTO> store = null;
    protected TextButton btnAddVendor = new TextButton("Add Table");
    protected TextButton btnEditVendor = new TextButton("Edit Table");

    public TargetDataModelGrid(AsyncCallback<String> asyncCallback) {
        this.asyncCallback = asyncCallback;
        container.add(layout());
        getList();
    }

    private Widget layout() {
        VerticalLayoutContainer vlc = new VerticalLayoutContainer();
        HorizontalLayoutContainer h = new HorizontalLayoutContainer();
        //vlc.setHeight(300);
        h.add(btnAddVendor);
        h.add(btnEditVendor, new HorizontalLayoutContainer.HorizontalLayoutData(-1, -1, new Margins(0, 0, 0, 10)));
        h.setHeight(50);
        vlc.add(h, new VerticalLayoutContainer.VerticalLayoutData(-1, -1, new Margins(5, 0, 0, 0)));

        btnAddVendor.getElement().getStyle().setPaddingBottom(10, Style.Unit.PX);
        vlc.add(grid());
        btnAddVendor.setWidth(150);
        btnEditVendor.setWidth(150);
        btnAddVendor.addSelectHandler(event -> addMissingVendor(null));
        btnEditVendor.addSelectHandler(event -> editVendor());

        return vlc;
    }

    private void editVendor() {
        EditVendorManagement addNewVendor = new EditVendorManagement(new AsyncCallback<String>() {
            @Override
            public void onFailure(Throwable caught) {
                DashboardUtils.logError("Error in Edit Vendor" + caught.getMessage());
            }

            @Override
            public void onSuccess(String result) {
                Info.display("Edit Vendor Name", result);
                getList();
            }
        });
        addNewVendor.go();
    }

    public interface vendorProperties extends PropertyAccess<TargetDataModelDTO> {
    	
    	@com.google.gwt.editor.client.Editor.Path("key")
        ModelKeyProvider<TargetDataModelDTO> key();

        ValueProvider<TargetDataModelDTO, String> name();

    }

    public VerticalLayoutContainer grid() {

        ColumnConfig<TargetDataModelDTO, String> nameCol = new ColumnConfig<TargetDataModelDTO, String>(props.name(), 150, "Name");
      
        ColumnConfig<TargetDataModelDTO, String> btnRemove = new ColumnConfig<TargetDataModelDTO, String>(props.name(), 120, "");
        ColumnConfig<TargetDataModelDTO, String> btnEdit = new ColumnConfig<TargetDataModelDTO, String>(props.name(), 120, "");

        TextButtonCell btnRemoveVendor = new TextButtonCell();
        TextButtonCell btnEditVendorName = new TextButtonCell();

        btnEditVendorName.addSelectHandler(event -> addMissingVendor(event));

        btnEditVendorName.setText("Add This Vendor Name");
        btnRemoveVendor.setText("Exit Vendor");
        btnEdit.setCell(btnEditVendorName);
        btnRemove.setCell(btnRemoveVendor);
        List<ColumnConfig<TargetDataModelDTO, ?>> columns = new ArrayList<ColumnConfig<TargetDataModelDTO, ?>>();

        columns.add(nameCol);
        columns.add(btnEdit);


        ColumnModel<TargetDataModelDTO> cm = new ColumnModel<TargetDataModelDTO>(columns);

        store = new ListStore<TargetDataModelDTO>(props.key());

        final Grid<TargetDataModelDTO> grid = new Grid<TargetDataModelDTO>(store, cm);
        grid.setHeight(400);
        grid.setColumnResize(true);
     

        DashboardUtils.setDefaultGridStyle(grid);
        VerticalLayoutContainer vlc = new VerticalLayoutContainer();
        vlc.add(grid, new VerticalLayoutContainer.VerticalLayoutData(-1, Window.getClientHeight() * .56));
        Window.addResizeHandler(Event -> grid.setHeight(Window.getClientHeight() * .56 + "px"));
        return vlc;
    }

    protected void getList() {
        AutoProgressMessageBox messageBoxProgress = DashboardUtils.getProgressMessageBox("Data Model Target", "Getting Data Model Tagets");

        supervisorService.vendorMissingListGet(Globals.HOST_IP_ADDRESS, new AsyncCallback<ArrayList<TargetDataModelDTO>>() {
            @Override
            public void onFailure(Throwable caught) {
                messageBoxProgress.hide();
                logError("Failure in getting Vendors List " + caught.getMessage());
                new WarningMessageBox(Constants.GETTING_MISSINGVENDOR_LIST, "Error in getting vendors List " + caught.getMessage());

            }

            @Override
            public void onSuccess(ArrayList<TargetDataModelDTO> TargetDataModelDTOList) {
                messageBoxProgress.hide();
                logInfo("Back from getting vendor List with size" + TargetDataModelDTOList.size());
                populate(TargetDataModelDTOList);

            }
        });

    }

    private void populate(ArrayList<TargetDataModelDTO> TargetDataModelDTOList) {
        store.clear();
        store.addAll(TargetDataModelDTOList);

    }

    protected void addMissingVendor(SelectEvent event) {
        String vendor = "";
        if (event != null) {
            Cell.Context c = event.getContext();
            int row = c.getIndex();
            TargetDataModelDTO TargetDataModelDTO = store.get(row);
            String mac = GxtStringUtils.upperCase(TargetDataModelDTO.getMacAddress().replaceAll("\\s+", ""));
            vendor = mac.substring(0, 6);
        }

        AddVendorManagement addNewVendor = new AddVendorManagement(vendor, new AsyncCallback<String>() {
            @Override
            public void onFailure(Throwable caught) {
                DashboardUtils.logError("Error in Add Vendor" + caught.getMessage());
            }

            @Override
            public void onSuccess(String result) {
                Info.display("Add Vendor", result);
                getList();
            }
        });
        addNewVendor.go();
    }


}


