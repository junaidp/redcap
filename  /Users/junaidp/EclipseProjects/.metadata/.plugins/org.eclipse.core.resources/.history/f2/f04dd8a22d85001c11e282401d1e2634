package com.analytics.client.view.menus.dashboard.steps.clinicaldatamodel.datamodel;

import com.analytics.shared.TestData;
import com.analytics.shared.dtos.DataModelDTO;
import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor.Path;
import com.google.gwt.event.logical.shared.SelectionEvent;
import com.google.gwt.event.logical.shared.SelectionHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.IsWidget;
import com.google.gwt.user.client.ui.Widget;
import com.sencha.gxt.core.client.ValueProvider;
import com.sencha.gxt.data.shared.LabelProvider;
import com.sencha.gxt.data.shared.ListStore;
import com.sencha.gxt.data.shared.ModelKeyProvider;
import com.sencha.gxt.data.shared.PropertyAccess;
import com.sencha.gxt.widget.core.client.ListView;
import com.sencha.gxt.widget.core.client.container.VerticalLayoutContainer;
import com.sencha.gxt.widget.core.client.form.ListField;

public class DataModelListWidget implements IsWidget {

	private ListField<DataModelDTO, String> listField = null;
	protected ListStore<DataModelDTO> store = null;
	protected ListView<DataModelDTO, String> listView = null;

	public interface Properties extends PropertyAccess<DataModelDTO> {
		@com.google.gwt.editor.client.Editor.Path("key")
		ModelKeyProvider<DataModelDTO> key();
		LabelProvider<DataModelDTO> name();


		@Path("name")
		ValueProvider<DataModelDTO, String> nameProp();
	}	

	Properties properties = GWT.create(Properties.class);

	@Override
	public Widget asWidget() {
		return layout();
	}

	public VerticalLayoutContainer layout() {
		VerticalLayoutContainer v = new VerticalLayoutContainer();
		v.add(listField);
		return v;
	}

	public DataModelListWidget() {

		store = new ListStore<DataModelDTO>(properties.key());
	
		listView = new ListView<DataModelDTO, String>(store, properties.nameProp());

		listField = new ListField<DataModelDTO, String>(listView);

		listView.getSelectionModel().addSelectionHandler(new SelectionHandler<DataModelDTO>() {

			@Override
			public void onSelection(SelectionEvent<DataModelDTO> event) {
				Window.alert(event.getSelectedItem().getName());
			}
		});

	}
	
	
}
