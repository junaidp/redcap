package com.analytics.client.view.menus.dashboard.steps.clinicaldatamodel.targetdatamodel;

import com.analytics.client.view.menus.dashboard.DashboardUtils;
import com.analytics.client.view.menus.dashboard.Panels;
import com.analytics.shared.TestData;
import com.analytics.shared.dtos.ColumnsDTO;
import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Style;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.sencha.gxt.cell.core.client.TextButtonCell;
import com.sencha.gxt.core.client.ValueProvider;
import com.sencha.gxt.core.client.util.Margins;
import com.sencha.gxt.data.shared.ListStore;
import com.sencha.gxt.data.shared.ModelKeyProvider;
import com.sencha.gxt.data.shared.PropertyAccess;
import com.sencha.gxt.widget.core.client.box.AutoProgressMessageBox;
import com.sencha.gxt.widget.core.client.button.TextButton;
import com.sencha.gxt.widget.core.client.container.HorizontalLayoutContainer;
import com.sencha.gxt.widget.core.client.container.VerticalLayoutContainer;
import com.sencha.gxt.widget.core.client.grid.ColumnConfig;
import com.sencha.gxt.widget.core.client.grid.ColumnModel;
import com.sencha.gxt.widget.core.client.grid.Grid;
import java.util.ArrayList;
import java.util.List;

public class ColumnsGrid extends VerticalLayoutContainer implements Panels {
	private static final vendorProperties props = GWT.create(vendorProperties.class);
	private ListStore<ColumnsDTO> store = null;
	protected TextButton btnAdd = new TextButton("Add Column");
	protected TextButton btnEdit = new TextButton("Edit Column");
	TestData testData = new TestData();

	public ColumnsGrid(AsyncCallback<String> asyncCallback) {
		layout();
	}

	@Override
	public void layout() {
		HorizontalLayoutContainer h = new HorizontalLayoutContainer();
		h.add(btnAdd);
		h.add(btnEdit, new HorizontalLayoutContainer.HorizontalLayoutData(-1, -1, new Margins(0, 0, 0, 10)));
		add(h, new VerticalLayoutContainer.VerticalLayoutData(-1, -1, new Margins(5, 0, 0, 0)));

		btnAdd.getElement().getStyle().setPaddingBottom(10, Style.Unit.PX);
		add(grid());
		btnAdd.setWidth(150);
		btnEdit.setWidth(150);
		//btnEdit.addSelectHandler(event -> editVendor());

	}

	public interface vendorProperties extends PropertyAccess<ColumnsDTO> {

		@com.google.gwt.editor.client.Editor.Path("key")
		ModelKeyProvider<ColumnsDTO> key();

		ValueProvider<ColumnsDTO, String> columnName();
		ValueProvider<ColumnsDTO, String> order();
		ValueProvider<ColumnsDTO, String> oracleDataType();
		ValueProvider<ColumnsDTO, String> length();
		ValueProvider<ColumnsDTO, String> precision();
		ValueProvider<ColumnsDTO, String> filter();
		
	}

	public VerticalLayoutContainer grid() {

		ColumnConfig<ColumnsDTO, String> nameCol = new ColumnConfig<ColumnsDTO, String>(props.columnName(), 20, "Column Name");
		ColumnConfig<ColumnsDTO, String> oracleName = new ColumnConfig<ColumnsDTO, String>(props.order(), 20, "Order");
		ColumnConfig<ColumnsDTO, String> sasName = new ColumnConfig<ColumnsDTO, String>(props.oracleDataType(), 20, "Oracle Dtaa Type");
		ColumnConfig<ColumnsDTO, String> sasLabel = new ColumnConfig<ColumnsDTO, String>(props.length(), 20, "Length");
		ColumnConfig<ColumnsDTO, String> aliases = new ColumnConfig<ColumnsDTO, String>(props.precision(), 20, "Precision");
		ColumnConfig<ColumnsDTO, String> sdtmIndentifier = new ColumnConfig<ColumnsDTO, String>(props.filter(), 20, "Filter/SDTM");
	
		TextButtonCell btnRemoveVendor = new TextButtonCell();
		TextButtonCell btnEditVendorName = new TextButtonCell();

		// btnEditVendorName.addSelectHandler(event -> addMissingVendor(event));

		btnEditVendorName.setText("Edit");
		btnRemoveVendor.setText("Remove");
	
		List<ColumnConfig<ColumnsDTO, ?>> columns = new ArrayList<ColumnConfig<ColumnsDTO, ?>>();

		columns.add(nameCol);
		columns.add(oracleName);
		columns.add(sasName);
		columns.add(sasLabel);
		columns.add(aliases);
		columns.add(sdtmIndentifier);
		


		ColumnModel<ColumnsDTO> cm = new ColumnModel<ColumnsDTO>(columns);

		store = new ListStore<ColumnsDTO>(props.key());

		final Grid<ColumnsDTO> grid = new Grid<ColumnsDTO>(store, cm);
		grid.setColumnResize(true);

		DashboardUtils.setDefaultGridStyle(grid);
		VerticalLayoutContainer vlc = new VerticalLayoutContainer();
		vlc.add(grid, new VerticalLayoutContainer.VerticalLayoutData(700, -1));
		//grid.setWidth("100%");
		
		getList();
		return vlc;
	}

	protected void getList() {
		AutoProgressMessageBox messageBoxProgress = DashboardUtils.getProgressMessageBox("Columns Model", "Getting Data Model Tagets");
		addData();	
		messageBoxProgress.hide();
		//logInfo("Back from getting TagetData List with size" + testData.getTargetDataModelList().size());
		populate(testData.getListColumnsModel());


	}

	private void addData() {
		ColumnsDTO d1 = new ColumnsDTO();
		d1.setKey("column1");
		d1.setColumnName("Studyed");
		d1.setOrder("1");
		d1.setOracleDataType("varchar");
		d1.setLength("40");
		d1.setPrecision("precc");
		d1.setFilter("fil");
		
		ColumnsDTO d2 = new ColumnsDTO();
		d1.setKey("column2");
		d1.setColumnName("visit");
		d1.setOrder("2");
		d1.setOracleDataType("varchar");
		d1.setLength("30");
		d1.setPrecision("prec2");
		d1.setFilter("fil3");
		testData.addColumns(d1);
		testData.addColumns(d2);
		
	}

	private void populate(ArrayList<ColumnsDTO> TargetDataModelDTOList) {
		store.clear();
		store.addAll(TargetDataModelDTOList);

	}

}


