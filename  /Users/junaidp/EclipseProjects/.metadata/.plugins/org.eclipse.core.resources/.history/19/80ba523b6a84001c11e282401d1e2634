package com.analytics.client.view.menus.dashboard.steps.clinicaldatamodel.targetdatamodel;

import com.analytics.client.view.menus.dashboard.DashboardUtils;
import com.analytics.shared.TestData;
import com.analytics.shared.dtos.TargetDataModelDTO;
import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Style;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.IsWidget;
import com.google.gwt.user.client.ui.Widget;
import com.sencha.gxt.cell.core.client.TextButtonCell;
import com.sencha.gxt.core.client.ValueProvider;
import com.sencha.gxt.core.client.util.Margins;
import com.sencha.gxt.data.shared.ListStore;
import com.sencha.gxt.data.shared.ModelKeyProvider;
import com.sencha.gxt.data.shared.PropertyAccess;
import com.sencha.gxt.widget.core.client.box.AutoProgressMessageBox;
import com.sencha.gxt.widget.core.client.button.TextButton;
import com.sencha.gxt.widget.core.client.container.HorizontalLayoutContainer;
import com.sencha.gxt.widget.core.client.container.VerticalLayoutContainer;
import com.sencha.gxt.widget.core.client.grid.ColumnConfig;
import com.sencha.gxt.widget.core.client.grid.ColumnModel;
import com.sencha.gxt.widget.core.client.grid.Grid;
import java.util.ArrayList;
import java.util.List;

public class TargetDataModelGrid extends TargetDataModelPanel implements IsWidget {
	private static final vendorProperties props = GWT.create(vendorProperties.class);
	private ListStore<TargetDataModelDTO> store = null;
	protected TextButton btnAddVendor = new TextButton("Add Table");
	protected TextButton btnEditVendor = new TextButton("Edit Table");
	
	TestData testData = new TestData();

	public TargetDataModelGrid(AsyncCallback<String> asyncCallback) {
//		this.asyncCallback = asyncCallback;
//		container.add(layout());
		
	}
	
	@Override
	public Widget asWidget() {
		return layout();
	}

	@Override
	public Widget layout() {
		VerticalLayoutContainer vlc = new VerticalLayoutContainer();
		HorizontalLayoutContainer h = new HorizontalLayoutContainer();
		h.add(btnAddVendor);
		h.add(btnEditVendor, new HorizontalLayoutContainer.HorizontalLayoutData(-1, -1, new Margins(0, 0, 0, 10)));
		vlc.add(h, new VerticalLayoutContainer.VerticalLayoutData(-1, -1, new Margins(5, 0, 0, 0)));

		btnAddVendor.getElement().getStyle().setPaddingBottom(10, Style.Unit.PX);
		vlc.add(grid());
		btnAddVendor.setWidth(150);
		btnEditVendor.setWidth(150);
		btnEditVendor.addSelectHandler(event -> editVendor());

		return vlc;
	}

	private void editVendor() {
		//        EditVendorManagement addNewVendor = new EditVendorManagement(new AsyncCallback<String>() {
		//            @Override
		//            public void onFailure(Throwable caught) {
		//                DashboardUtils.logError("Error in Edit Vendor" + caught.getMessage());
		//            }
		//
		//            @Override
		//            public void onSuccess(String result) {
		//                Info.display("Edit Vendor Name", result);
		//                getList();
		//            }
		//        });
		//        addNewVendor.go();
	}

	public interface vendorProperties extends PropertyAccess<TargetDataModelDTO> {

		@com.google.gwt.editor.client.Editor.Path("key")
		ModelKeyProvider<TargetDataModelDTO> key();

		ValueProvider<TargetDataModelDTO, String> name();

	}

	public VerticalLayoutContainer grid() {

		ColumnConfig<TargetDataModelDTO, String> nameCol = new ColumnConfig<TargetDataModelDTO, String>(props.name(), 20, "Name");

		ColumnConfig<TargetDataModelDTO, String> btnRemove = new ColumnConfig<TargetDataModelDTO, String>(props.name(), 20, "");
		ColumnConfig<TargetDataModelDTO, String> btnEdit = new ColumnConfig<TargetDataModelDTO, String>(props.name(), 20, "");

		TextButtonCell btnRemoveVendor = new TextButtonCell();
		TextButtonCell btnEditVendorName = new TextButtonCell();

		// btnEditVendorName.addSelectHandler(event -> addMissingVendor(event));

		btnEditVendorName.setText("Edit");
		btnRemoveVendor.setText("Exit Vendor");
		btnEdit.setCell(btnEditVendorName);
		btnRemove.setCell(btnRemoveVendor);
		List<ColumnConfig<TargetDataModelDTO, ?>> columns = new ArrayList<ColumnConfig<TargetDataModelDTO, ?>>();

		columns.add(nameCol);
		columns.add(btnEdit);
		columns.add(btnRemove);


		ColumnModel<TargetDataModelDTO> cm = new ColumnModel<TargetDataModelDTO>(columns);

		store = new ListStore<TargetDataModelDTO>(props.key());

		final Grid<TargetDataModelDTO> grid = new Grid<TargetDataModelDTO>(store, cm);
		grid.setColumnResize(true);

		DashboardUtils.setDefaultGridStyle(grid);
		VerticalLayoutContainer vlc = new VerticalLayoutContainer();
		vlc.add(grid, new VerticalLayoutContainer.VerticalLayoutData(500, -1));
		
		getList();
		return vlc;
	}

	protected void getList() {
		AutoProgressMessageBox messageBoxProgress = DashboardUtils.getProgressMessageBox("Data Model Target", "Getting Data Model Tagets");
		addTargetData();	
		messageBoxProgress.hide();
		//logInfo("Back from getting TagetData List with size" + testData.getTargetDataModelList().size());
		populate(testData.getTargetDataModelList());


	}

	private void addTargetData() {
		TargetDataModelDTO d1 = new TargetDataModelDTO();
		d1.setKey("target11");
		d1.setName("Target1");
		TargetDataModelDTO d2 = new TargetDataModelDTO();
		d2.setName("Target2");
		d2.setKey("Target22");
		TargetDataModelDTO d3 = new TargetDataModelDTO();
		d3.setName("Target3");
		d3.setKey("Target23");
		TargetDataModelDTO d4 = new TargetDataModelDTO();
		d4.setName("Target4");
		d4.setKey("Target24");
		testData.addTagrgetDataModel(d1);
		testData.addTagrgetDataModel(d2);
		testData.addTagrgetDataModel(d3);
		testData.addTagrgetDataModel(d4);

	}

	private void populate(ArrayList<TargetDataModelDTO> TargetDataModelDTOList) {
		store.clear();
		store.addAll(TargetDataModelDTOList);

	}

}


